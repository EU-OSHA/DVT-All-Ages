define(function(require){var Utils=function(){var colors=require("json!horizontal/model/colors");return{getColorCountry:function(country){switch(country){case-1:return colors.baseOver;case 0:return colors.base;case 1:return colors.country1;case 12:return colors.country12;case 2:return colors.country2;case 22:return colors.country22;case"1-overlapping":return colors["comparison-first-pyramid-overlapping"];case"2-overlapping":return colors["comparison-second-pyramid-overlapping"];default:return this.getEUColor()}},getGroupColor:function(group){switch(group){case"1":return colors.group1;case"2":return colors.group2;case"3":return colors.group3;case"4":return colors.group4;default:return colors.group1}},getEUColor:function(tone){switch(tone){case 2:return colors.europe2;default:return colors.europe}},getEUMapBaseColor:function(){return colors.europeMapBase},getEUTooltipColor:function(){return colors.EUTooltip},getTooltipFontColor:function(){return colors.EUTooltipFontColor},getEUTooltipStrokeColor:function(){return colors.EUTooltipStroketColor},fixGroupColor:function(group,$scope){return $scope.dashboard.parameters.pEUColor=this.getEUColor(),$scope.dashboard.parameters.pGroupColor=this.getGroupColor(group),$scope.dashboard.parameters.pColor1=this.getGroupColor("1"),$scope.dashboard.parameters.pColor2=this.getGroupColor("2"),$scope.dashboard.parameters.pColor3=this.getGroupColor("3"),$scope.dashboard.parameters.pColor4=this.getGroupColor("4"),$scope},getSpiderIndicator:function(color){switch(color){case 1:return colors.spider.indicator1;default:return colors.spider.indicator0}},getSpiderValuesColor:function(){return colors.spider.valuesColor},setCDAIn:function(vertical){switch(vertical){case"CA":return"all-ages/dashboards/approachdata.cda";case"IS":return"all-ages/dashboards/issuedata.cda";default:return"all-ages/dashboards/datapilot.cda"}},executeFunctionByName:function(functionName,context,args){for(var args=[].slice.call(arguments).splice(2),namespaces=functionName.split("."),func=namespaces.pop(),i=0;i<namespaces.length;i++)context=context[namespaces[i]];return context[func].apply(context,args)}}};return Utils.$inject=[],Utils});